<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       ">
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- Grab out properties for use in the Spring Configs -->
	<context:property-placeholder location="classpath:application.properties" />

	<!-- enable autowire -->
	<context:annotation-config />

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Enable transaction demarcation with annotations -->
	<tx:annotation-driven />

	<!-- Enable components scanning and autowire(beware that this does not enable 
		Mybatis mapper scanning!) -->
	<context:component-scan base-package="com.chy.shiro.service" />
	
	<!-- 配置数据源， 使用druid数据源 -->
        <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        	<property name="url" value="${jdbc.url}" />
        	<property name="username" value="${jdbc.username}" />
        	<property name="password" value="${jdbc.password}" />
        	
        	<!-- 初始化连接大小 -->
        	<property name="initialSize" value="0" />
        	<!-- 连接池最大连接数 -->
        	<property name="maxActive" value="20" />
        	
        	<!-- 连接池最小空闲 -->
        	<property name="minIdle" value="0" />
        	<!-- 获取连接最大等待时间 -->
        	<property name="maxWait" value="60000" />
        	<property name="poolPreparedStatements" value="false" />
        	<property name="testOnBorrow" value="false" />
        	<property name="testOnReturn" value="false" />
        	<property name="testWhileIdle" value="true" />
        	
        	<!-- 配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位毫秒 -->
        	<property name="timeBetweenEvictionRunsMillis" value="60000" />
        	<!-- 配置一个连接在池中最小生存时间，单位毫秒 -->
        	<property name="minEvictableIdleTimeMillis" value="25200000" />
        	<!-- 打开removeAbandoned功能 -->
        	<property name="removeAbandoned" value="true" />
        	<!-- 1800秒，也就是30分钟 -->
        	<property name="removeAbandonedTimeout" value="1800" />
        	<!-- 关闭abandoned连接输出错误日志 -->
        	<property name="logAbandoned" value="true" />
        	<!-- 监控数据库 -->
        	<property name="filters" value="mergeStat" />
        </bean>

	<!-- Sample Beans -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.chy.shiro.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- Security Configuration / Apache Shiro -->
	<import resource="shiro-context.xml" />

	<!-- dataSource Configuration/Mybatis -->
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/chy/shiro/mapping/**/*.xml"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> -->
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>


	<!-- spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.chy.shiro.service.impl.*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>

</beans>